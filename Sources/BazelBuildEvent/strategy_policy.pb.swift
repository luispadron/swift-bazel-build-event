// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: src/main/protobuf/strategy_policy.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2022 The Bazel Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Provides control over what strategies (local, remote, etc) may be used.
///
/// An empty policies (e.g. unset) implies no enforcement, anything is allowed.
///
/// Policies are enforced against both user-provided values (flags) and
/// application-internal defaults. The latter is useful for guarding against
/// unexpectedly hard-coded defaults.
///
/// Sample usage to allow everything to execute remotely, while only allowing
/// genrules to execute locally:
///
///   strategy_policy {
///     mnemonic_policy {
///       default_allowlist: ["remote"]
///       strategy_allowlist: [
///         { mnemonic: "Genrule" strategy: ["local"] }
///       ]
///     }
///   }
public struct Blaze_StrategyPolicy_StrategyPolicy: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Controls per-mnemonic policies for regular spawn/action execution. Relevant
  /// command-line flags this controls include --strategy and --genrule_strategy.
  public var mnemonicPolicy: Blaze_StrategyPolicy_MnemonicPolicy {
    get {return _mnemonicPolicy ?? Blaze_StrategyPolicy_MnemonicPolicy()}
    set {_mnemonicPolicy = newValue}
  }
  /// Returns true if `mnemonicPolicy` has been explicitly set.
  public var hasMnemonicPolicy: Bool {return self._mnemonicPolicy != nil}
  /// Clears the value of `mnemonicPolicy`. Subsequent reads from it will return its default value.
  public mutating func clearMnemonicPolicy() {self._mnemonicPolicy = nil}

  /// Controls per-mnemonic policies for the remote execution leg of dynamic
  /// execution. Relevant flag is --dynamic_remote_strategy.
  public var dynamicRemotePolicy: Blaze_StrategyPolicy_MnemonicPolicy {
    get {return _dynamicRemotePolicy ?? Blaze_StrategyPolicy_MnemonicPolicy()}
    set {_dynamicRemotePolicy = newValue}
  }
  /// Returns true if `dynamicRemotePolicy` has been explicitly set.
  public var hasDynamicRemotePolicy: Bool {return self._dynamicRemotePolicy != nil}
  /// Clears the value of `dynamicRemotePolicy`. Subsequent reads from it will return its default value.
  public mutating func clearDynamicRemotePolicy() {self._dynamicRemotePolicy = nil}

  /// Controls per-mnemonic policies for the local execution leg of dynamic
  /// execution. Relevant flag is --dynamic_local_strategy.
  public var dynamicLocalPolicy: Blaze_StrategyPolicy_MnemonicPolicy {
    get {return _dynamicLocalPolicy ?? Blaze_StrategyPolicy_MnemonicPolicy()}
    set {_dynamicLocalPolicy = newValue}
  }
  /// Returns true if `dynamicLocalPolicy` has been explicitly set.
  public var hasDynamicLocalPolicy: Bool {return self._dynamicLocalPolicy != nil}
  /// Clears the value of `dynamicLocalPolicy`. Subsequent reads from it will return its default value.
  public mutating func clearDynamicLocalPolicy() {self._dynamicLocalPolicy = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _mnemonicPolicy: Blaze_StrategyPolicy_MnemonicPolicy? = nil
  fileprivate var _dynamicRemotePolicy: Blaze_StrategyPolicy_MnemonicPolicy? = nil
  fileprivate var _dynamicLocalPolicy: Blaze_StrategyPolicy_MnemonicPolicy? = nil
}

public struct Blaze_StrategyPolicy_MnemonicPolicy: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Default allowed strategies for mnemonics not present in `strategy` list.
  public var defaultAllowlist: [String] = []

  public var strategyAllowlist: [Blaze_StrategyPolicy_StrategiesForMnemonic] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Per-mnemonic allowlist settings.
public struct Blaze_StrategyPolicy_StrategiesForMnemonic: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var mnemonic: String {
    get {return _mnemonic ?? String()}
    set {_mnemonic = newValue}
  }
  /// Returns true if `mnemonic` has been explicitly set.
  public var hasMnemonic: Bool {return self._mnemonic != nil}
  /// Clears the value of `mnemonic`. Subsequent reads from it will return its default value.
  public mutating func clearMnemonic() {self._mnemonic = nil}

  public var strategy: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _mnemonic: String? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "blaze.strategy_policy"

extension Blaze_StrategyPolicy_StrategyPolicy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StrategyPolicy"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mnemonic_policy"),
    2: .standard(proto: "dynamic_remote_policy"),
    3: .standard(proto: "dynamic_local_policy"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._mnemonicPolicy) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._dynamicRemotePolicy) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._dynamicLocalPolicy) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._mnemonicPolicy {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._dynamicRemotePolicy {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._dynamicLocalPolicy {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Blaze_StrategyPolicy_StrategyPolicy, rhs: Blaze_StrategyPolicy_StrategyPolicy) -> Bool {
    if lhs._mnemonicPolicy != rhs._mnemonicPolicy {return false}
    if lhs._dynamicRemotePolicy != rhs._dynamicRemotePolicy {return false}
    if lhs._dynamicLocalPolicy != rhs._dynamicLocalPolicy {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Blaze_StrategyPolicy_MnemonicPolicy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MnemonicPolicy"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "default_allowlist"),
    2: .standard(proto: "strategy_allowlist"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.defaultAllowlist) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.strategyAllowlist) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.defaultAllowlist.isEmpty {
      try visitor.visitRepeatedStringField(value: self.defaultAllowlist, fieldNumber: 1)
    }
    if !self.strategyAllowlist.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.strategyAllowlist, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Blaze_StrategyPolicy_MnemonicPolicy, rhs: Blaze_StrategyPolicy_MnemonicPolicy) -> Bool {
    if lhs.defaultAllowlist != rhs.defaultAllowlist {return false}
    if lhs.strategyAllowlist != rhs.strategyAllowlist {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Blaze_StrategyPolicy_StrategiesForMnemonic: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StrategiesForMnemonic"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mnemonic"),
    2: .same(proto: "strategy"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._mnemonic) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.strategy) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._mnemonic {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    if !self.strategy.isEmpty {
      try visitor.visitRepeatedStringField(value: self.strategy, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Blaze_StrategyPolicy_StrategiesForMnemonic, rhs: Blaze_StrategyPolicy_StrategiesForMnemonic) -> Bool {
    if lhs._mnemonic != rhs._mnemonic {return false}
    if lhs.strategy != rhs.strategy {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
